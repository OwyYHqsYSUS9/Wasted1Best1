local Areas = {
    ['Beach'] = Vector3.new(-159.4051361084, 3.1030039787292, -204.59585571289),
    ['Winter'] = Vector3.new(-158.83238220215, 3.1030039787292, -35.934223175049),
    ['City'] = Vector3.new(-159.31413269043, 3.1030039787292, 134.33441162109),
    ['Atlantis'] = Vector3.new(-159.05198669434, 3.1030039787292, 299.51196289063),
    ['Moon'] = Vector3.new(-159.3035736084, 3.1030039787292, 470.77731323242),
    ['Candy'] = Vector3.new(-159.18299865723, 3.1030039787292, 640.59576416016),
    ['Cherry'] = Vector3.new(649.03265380859, -21.987018585205, 54.343353271484),
    ['Skull'] = Vector3.new(1582.8555908203, 262.50512695313, -36.495300292969),
    ['Volcano'] = Vector3.new(-159.29730224609, 3.1030039787292, 788.24572753906)
}
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local HttpService = game:GetService("HttpService")
getgenv().settings = {
    autofarm = {
        toggle = false,
        currentPath = nil,
        amountToPickup = 1,
        misc = {
            autobuy = false,
            autoexercise = false,
            extoggled = false
        }
    },
    pets = {
        autorainbow = {
            toggle = false,
            amount = nil,
            pets = 5
        },
        autogold = {
            toggle = false,
            amount = nil,
            pets = 5
        },
        autobuy = {
            toggle = false,
            egg = nil
        },
        autodelete = {
            toggle = false,
            level = 0
        }
    },
    misc = {
        autospin = false
    }
}
local function grabChest()
    for i,v in pairs(game:GetService("Workspace")["__MAP"].Chests:GetChildren()) do
        if (v.Tag.Timer.Text:match('Redeem!')) then
            game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(v.Position)
            wait(0.5)
            vu:CaptureController()
            vu:SetKeyDown('0x45')
            wait(1)
            vu:SetKeyUp('0x45')
        end
    end
end

local function checkWeight(name)
    if (not name) then return nil end
    for i,v in pairs(game:GetService('ReplicatedStorage').Game.Pickups:GetChildren()) do
        local data = require(v:FindFirstChildOfClass('ModuleScript'))
        if (data.Name == name) then
            return data.Weight 
        end
    end
end

local function getPortal()
    for i,v in pairs(game:GetService("Workspace")["__MAP"].Interactive.Portals:GetChildren()) do
        if ((v.Center.Position-Vector3.new(-453.777, 10.3085, -58.4016)).Magnitude < 20) then
            return v.Center
        end
    end
    return nil
end

local function getPlates()
    local Portal = getPortal()
    local Plates = {}
    for i,v in pairs(game:GetService("Workspace")["__MAP"].Training:GetChildren()) do
        if ((v.Position-Portal.Position).Magnitude < 150) then
            table.insert(Plates, v) 
        end
    end
    return Plates
end

local function exercise()
    for i,v in pairs(getPlates()) do
        if (not v.InUse.Value) then
            game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(v.Position + Vector3.new(0,5,0))
            wait(1)
            fireproximityprompt(v.ProximityPrompt)
            wait(1)
            repeat wait() until (not v.InUse.Value)
            break
        end
    end
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("WastedBest", "DarkTheme")

local AutofarmTab = Window:NewTab("Autofarm")
local AutofarmStatusSection = AutofarmTab:NewSection("Status")
local TeleportsTab = Window:NewTab("Teleports")
local PetTab = Window:NewTab("Pets")
local MiscTab = Window:NewTab("Misc")
local OPTpSec = TeleportsTab:NewSection('OP Stuff')
local AreasSec = TeleportsTab:NewSection('Areas')
local UITPSec = TeleportsTab:NewSection('UI Circles')
local ChestTP = TeleportsTab:NewSection('Chests')

for i,v in pairs(game:GetService("Workspace")["__MAP"].Chests:GetChildren()) do
    ChestTP:NewButton(v.Name, 'Teleports you to the '..v.Name..' chest.', function() game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(v.Position + Vector3.new(0,10,0)) end)
end

OPTpSec:NewButton('Best Exercise Pad', 'Wasted', function()
    for i,v in pairs(getPlates()) do
        if (not v.InUse.Value) then
            game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(v.Position + Vector3.new(0,5,0))
            break
        end
    end
end)

for i,v in pairs(Areas) do
    AreasSec:NewButton(i, 'Teleports you to the '..i..' area.', function()
        game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(v)
    end)
end

for i,v in pairs(game:GetService("Workspace")["__MAP"].Interactive.Pads:GetChildren()) do
    UITPSec:NewButton(v.Name, 'Teleports you to the '..v.Name..' pad.', function()
        game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(v.Position + Vector3.new(0,10,0))
    end)
end

local MiscSec = MiscTab:NewSection('Auto-Spin')
local spintoggle = MiscSec:NewToggle('Enable', 'Wasted', function(aaa) 
    if (aaa) then settings.misc.autospin = true else settings.misc.autospin = false end
end)
local AutoRainbowSection = PetTab:NewSection("Auto-Rainbow")
AutoRainbowSection:NewTextBox("Multiplier", "Wasted", function(txt)
	settings.pets.autorainbow.amount = tonumber(txt)
end)
local autorainbowtoggle = AutoRainbowSection:NewToggle("Enable", "Wasted", function(v)
    if (v) then
        settings.pets.autorainbow.toggle = true
    else
        settings.pets.autorainbow.toggle = false
    end
end)

AutoRainbowSection:NewButton('Turn all Pets Rainbow', 'Wasted', function()
    for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Pets:GetChildren()) do
        if (v:IsA('TextButton')) then
            local tempTable = {
                [1] = v.Name,
                [2] = v.Name,
                [3] = v.Name,
                [4] = v.Name,
                [5] = v.Name,
                [6] = v.Name
            }

            game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer('Use Rainbow Machine', tempTable)
        end
    end
end)

local AutoGoldenSection = PetTab:NewSection("Auto-Golden")
AutoGoldenSection:NewTextBox("Multiplier", "Wasted", function(txt)
	settings.pets.autogold.amount = tonumber(txt)
end)
local autogoldtoggle = AutoGoldenSection:NewToggle("Enable", "Wasted", function(v)
    if (v) then
        settings.pets.autogold.toggle = true
    else
        settings.pets.autogold.toggle = false
    end
end)

AutoGoldenSection:NewButton('Turn all Pets Gold', 'Wasted', function()
    for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Pets:GetChildren()) do
        if (v:IsA('TextButton')) then
            local tempTable = {
                [1] = v.Name,
                [2] = v.Name,
                [3] = v.Name,
                [4] = v.Name,
                [5] = v.Name,
                [6] = v.Name
            }

            game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer('Use Gold Machine', tempTable)
        end
    end
end)

local label = AutofarmStatusSection:NewLabel("Status: Off")
local targetlabel = AutofarmStatusSection:NewLabel("Current Target: None")
spawn(function()while wait() do if (settings.autofarm.toggle) then label:UpdateLabel('Status: On') else label:UpdateLabel('Status: Off') end end end)
spawn(function()while wait() do if (settings.autofarm.currentPath ~= nil) then targetlabel:UpdateLabel('Current Target: '..settings.autofarm.currentPath.Name) else targetlabel:UpdateLabel('Current Target: None') end end end)
local autofarmenabler = AutofarmStatusSection:NewToggle("Enable", "Wasted", function(v)
    if (v) then
        settings.autofarm.toggle = true
    else
        settings.autofarm.toggle = false
    end
end)
local AutofarmTargetSettingsSection = AutofarmTab:NewSection("Target Settings")

AutofarmTargetSettingsSection:NewSlider("Amount to pickup", "Wasted", 3, 1, function(s)
    settings.autofarm.amountToPickup = s
end)

local afarddmmiscsec = AutofarmTab:NewSection("Auto-Exercise [Disable Autofarm]")
local aasfdhsda = afarddmmiscsec:NewToggle('Enable', 'Wasted', function(v)
    if (v) then 
        settings.autofarm.misc.autoexercise = true 
    else 
        settings.autofarm.misc.autoexercise = false 
    end
end)

local afarmmiscsec = AutofarmTab:NewSection("Auto-buy Areas")
local aasfhsda = afarmmiscsec:NewToggle('Enable', 'Wasted', function(v)
    if (v) then settings.autofarm.misc.autobuy = true else settings.autofarm.misc.autobuy = false end
end)

local AutoBuySection = PetTab:NewSection("Auto-Buy")
AutoBuySection:NewDropdown("Egg Type", "Choose egg", {"Beach - 1", "Winter - 2", "City - 3", "Atlantis - 4", "Moon - 5", "Candy - 6", "Beach Golden - 7", "Event - 8", "Event OP - 9", 'Mythical - 10'}, function(currentOption)
    local eggNumber = tonumber(string.split(currentOption, '- ')[2])
    settings.pets.autobuy.egg = eggNumber
end)



local autobuytoggle = AutoBuySection:NewToggle("Enable", "Wasted", function(v)
    if (v) then
        settings.pets.autobuy.toggle = true
    else
        settings.pets.autobuy.toggle = false
    end
end)

local AutoDeleteSection = PetTab:NewSection("Auto-Delete")

AutoDeleteSection:NewTextBox("Delete less than...", "Wasted", function(txt)
	settings.pets.autodelete.level = tonumber(txt)
end)
local autodeletetoggle = AutoDeleteSection:NewToggle("Enable", "Wasted", function(v)
    if (v) then
        settings.pets.autodelete.toggle = true
    else
        settings.pets.autodelete.toggle = false
    end
end)



local allTargets = {}
for i,v in pairs(game:GetService("Workspace")["__MAP"].Collectibles:GetChildren()) do
    for x,z in pairs(v:GetChildren()) do
        if (z:FindFirstChildOfClass('Folder')) then
            local fPath = z:FindFirstChildOfClass('Folder')
            local weight = checkWeight(fPath.Name)
            table.insert(allTargets, fPath.Name..' - '..tostring(weight))
        end
    end
end

AutofarmTargetSettingsSection:NewDropdown("Targets", "Wasted", allTargets, function(currentOption)
    local target = string.split(currentOption, ' -')[1]
    
    for i,v in pairs(game:GetService("Workspace")["__MAP"].Collectibles:GetChildren()) do
        for x,z in pairs(v:GetChildren()) do
            if (z:FindFirstChildOfClass('Folder')) then
                local fPath = z:FindFirstChildOfClass('Folder')
                if (fPath.Name == target) then
                    settings.autofarm.currentPath = fPath
                end
            end
        end
    end
end)

spawn(function()
    while wait() do
        if (settings.autofarm.toggle) and (settings.autofarm.currentPath ~= nil) then

            for i=1, settings.autofarm.amountToPickup do
                if (i == 1) then
                    game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(settings.autofarm.currentPath.Parent.Position + Vector3.new(0, 3, 5))
                    wait(0.3)
                    game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(settings.autofarm.currentPath.Parent.Position + Vector3.new(5, 3, 0))
                elseif (i == 2) then
                    game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(settings.autofarm.currentPath.Parent.Position + Vector3.new(5, 3, 0))
                    wait(0.3)
                    game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(settings.autofarm.currentPath.Parent.Position + Vector3.new(0, 3, -5))
                elseif (i == 3) then
                    game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(settings.autofarm.currentPath.Parent.Position + Vector3.new(0, 3, -5))
                    wait(0.3)
                    game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(settings.autofarm.currentPath.Parent.Position + Vector3.new(5, 3, 0))
                end
                wait(0.5)
                fireproximityprompt(settings.autofarm.currentPath.Parent.ProximityPrompt)
                wait(0.5)
            end

            wait(2.2)
            game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(703.19, -9.77975, -0.241)
            wait(0.1)
            game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(settings.autofarm.currentPath.Parent.Position + Vector3.new(0, 3, 5))
            wait(0.8)
            game:GetService('Players').LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(703.19, -9.77975, -0.241)
        end
    end
end)

spawn(function()
    while wait() do
        if (settings.pets.autogold.toggle) and (settings.pets.autogold.amount ~= nil) then
            local matchingPetCount = {}
            local tempTable = {}
            for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Pets:GetChildren()) do
                if (v:IsA('TextButton')) then
                    local level = tonumber(string.split(v.Level.Text, 'x')[2])
                    if (level == settings.pets.autogold.amount) then
                        table.insert(matchingPetCount, v.Name)
                    end
                end
            end
            for i,v in pairs(matchingPetCount) do
                table.insert(tempTable, v)
                if (i == 5) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Gold Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 10) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Gold Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 15) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Gold Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 20) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Gold Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 25) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Gold Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 30) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Gold Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 35) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Gold Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                end
                
            end
        end
    end
end)

spawn(function()
    while wait() do
        if (settings.pets.autorainbow.toggle) and (settings.pets.autorainbow.amount ~= nil) then
            local matchingPetCount = {}
            local tempTable = {}
            for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Pets:GetChildren()) do
                if (v:IsA('TextButton')) then
                    local level = tonumber(string.split(v.Level.Text, 'x')[2])
                    if (level == settings.pets.autorainbow.amount) then
                        table.insert(matchingPetCount, v.Name)
                    end
                end
            end
            for i,v in pairs(matchingPetCount) do
                table.insert(tempTable, v)
                if (i == 5) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Rainbow Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 10) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Rainbow Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 15) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Rainbow Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 20) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Rainbow Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 25) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Rainbow Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 30) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Rainbow Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                elseif (i == 35) then
                    game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Use Rainbow Machine", tempTable)
                    wait(0.2)
                    tempTable = {}
                end
                
            end
        end
    end
end)

spawn(function()
    while wait() do
        if (settings.pets.autobuy.toggle) and (settings.pets.autobuy.egg ~= nil) then
            game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Buy Egg", "Egg"..tostring(settings.pets.autobuy.egg), false)
        end
    end
end)

spawn(function()
    while wait() do
        if (settings.pets.autodelete.toggle) and (settings.pets.autodelete.level ~= nil) then
            for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Pets:GetChildren()) do
                if (v:IsA('TextButton')) then
                    if (v:FindFirstChild('Level')) then
                        local LevelSplit = string.split(v.Level.Text, 'x')[2]
                        local LevelNum = tonumber(LevelSplit)
                        if (LevelNum < settings.pets.autodelete.level) then
                            local Table = {
                                [1] = v.Name
                            }
                            game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Delete Several Pets", Table)
                        end
                    end
                end
            end
        end
    end
end)
spawn(function()
    while wait() do
        if (settings.misc.autospin) then
            game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer('Spin Wheel')
        end
    end
end)

spawn(function()
    while wait() do
        if (settings.autofarm.misc.autobuy) then
            game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Buy Area", 'Event')
            game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Buy Area", 'Cherry')
            game:GetService("ReplicatedStorage").Assets.Events.RemoteFunction:InvokeServer("Buy Area", 'Skull')
        end
    end
end)

spawn(function()
    while wait() do
        if (settings.autofarm.misc.autoexercise) and (not settings.autofarm.toggle) and (not settings.autofarm.misc.extoggled) then
            exercise()
            settings.autofarm.misc.extoggled = true
        elseif (settings.autofarm.misc.autoexercise) and (settings.autofarm.toggle) and (settings.autofarm.misc.extoggled) then
            game:GetService("ReplicatedStorage").Assets.Events.RemoteEvent:FireServer("exitTraining")
            game:GetService("ReplicatedStorage").Assets.Events.RemoteEvent:FireServer("exitTraining")
            game:GetService("ReplicatedStorage").Assets.Events.RemoteEvent:FireServer("exitTraining")
            game:GetService("ReplicatedStorage").Assets.Events.RemoteEvent:FireServer("exitTraining")
            game:GetService("ReplicatedStorage").Assets.Events.RemoteEvent:FireServer("exitTraining")
            game:GetService("ReplicatedStorage").Assets.Events.RemoteEvent:FireServer("exitTraining")
            settings.autofarm.misc.extoggled = false
        end
    end
end)
local ingame_notify = require(game.ReplicatedStorage:WaitForChild("Library"));
ingame_notify.Message.New("loaded.");
notify('loaded.', 10)
